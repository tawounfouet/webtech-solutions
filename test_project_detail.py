#!/usr/bin/env python
"""
Script de test pour v√©rifier la configuration de la page de d√©tail projet
avec CKEditor5, Cloudinary et le nouveau carousel Bootstrap.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.test import TestCase, Client
from django.urls import reverse
from projects.models import Project, ProjectCategory, Client
from authentication.models import User

def test_project_detail_page():
    """Test la page de d√©tail d'un projet"""
    
    print("üß™ Test de la page de d√©tail projet...")
    
    # Cr√©er un client de test
    client = Client()
    
    # V√©rifier qu'il y a au moins un projet
    project = Project.objects.first()
    if not project:
        print("‚ùå Aucun projet trouv√©. Utilisez le script create_sample_content.py pour cr√©er des donn√©es de test.")
        return False
    
    # Tester la page de d√©tail
    try:
        url = reverse('projects:project_detail', kwargs={'slug': project.slug})
        response = client.get(url)
        
        if response.status_code == 200:
            print(f"‚úÖ Page de d√©tail accessible : {url}")
            
            # V√©rifier que les √©l√©ments importants sont pr√©sents
            content = response.content.decode('utf-8')
            
            checks = [
                ('Hero section', 'hero-section'),
                ('Titre du projet', project.title),
                ('Image principale', 'featured-image-section'),
                ('Section info projet', 'project-info-section'),
                ('Contenu CKEditor5', 'project-content-section'),
                ('CSS personnalis√©', 'project-detail.css'),
            ]
            
            # V√©rifier la galerie si elle existe
            if project.images.exists():
                checks.append(('Carousel Bootstrap', 'projectGalleryCarousel'))
                checks.append(('Indicateurs carousel', 'carousel-indicators'))
                checks.append(('Contr√¥les carousel', 'carousel-control'))
            
            # V√©rifier les m√©triques si elles existent
            if any([project.budget, project.team_size, project.delivery_time]):
                checks.append(('Section m√©triques', 'project-metrics-section'))
            
            # V√©rifier le t√©moignage s'il existe
            if project.client and project.client.testimonial:
                checks.append(('Section t√©moignage', 'testimonial-section'))
            
            all_checks_passed = True
            for check_name, check_content in checks:
                if check_content in content:
                    print(f"  ‚úÖ {check_name}")
                else:
                    print(f"  ‚ùå {check_name} manquant")
                    all_checks_passed = False
            
            return all_checks_passed
            
        else:
            print(f"‚ùå Erreur {response.status_code} lors de l'acc√®s √† la page : {url}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test : {e}")
        return False

def test_ckeditor5_configuration():
    """Test la configuration CKEditor5"""
    
    print("\nüß™ Test de la configuration CKEditor5...")
    
    try:
        from django.conf import settings
        
        # V√©rifier que django-ckeditor-5 est install√©
        if 'django_ckeditor_5' in settings.INSTALLED_APPS:
            print("‚úÖ django-ckeditor-5 install√©")
        else:
            print("‚ùå django-ckeditor-5 non install√©")
            return False
        
        # V√©rifier la configuration CKEditor5
        if hasattr(settings, 'CKEDITOR_5_CONFIGS'):
            print("‚úÖ Configuration CKEditor5 pr√©sente")
            
            config = settings.CKEDITOR_5_CONFIGS.get('default', {})
            if 'toolbar' in config:
                print("  ‚úÖ Toolbar configur√©e")
            if 'ckfinder' in config or 'simpleUpload' in config:
                print("  ‚úÖ Upload configur√©")
            
        else:
            print("‚ùå Configuration CKEditor5 manquante")
            return False
        
        # V√©rifier la configuration Cloudinary pour CKEditor5
        if hasattr(settings, 'CKEDITOR_5_FILE_STORAGE'):
            print("‚úÖ Stockage Cloudinary configur√© pour CKEditor5")
        else:
            print("‚ùå Stockage Cloudinary manquant pour CKEditor5")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de configuration : {e}")
        return False

def test_project_models():
    """Test les mod√®les avec CKEditor5Field"""
    
    print("\nüß™ Test des mod√®les avec CKEditor5Field...")
    
    try:
        from projects.models import Project, ProjectCategory, Client
        from django_ckeditor_5.fields import CKEditor5Field
        
        # V√©rifier les champs CKEditor5
        model_checks = [
            (Project, 'description'),
            (Project, 'content'),
            (ProjectCategory, 'description'),
            (Client, 'description'),
        ]
        
        all_checks_passed = True
        for model, field_name in model_checks:
            try:
                field = model._meta.get_field(field_name)
                if isinstance(field, CKEditor5Field):
                    print(f"  ‚úÖ {model.__name__}.{field_name} utilise CKEditor5Field")
                else:
                    print(f"  ‚ùå {model.__name__}.{field_name} n'utilise pas CKEditor5Field")
                    all_checks_passed = False
            except Exception:
                print(f"  ‚ùå Champ {model.__name__}.{field_name} non trouv√©")
                all_checks_passed = False
        
        return all_checks_passed
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des mod√®les : {e}")
        return False

def main():
    """Fonction principale de test"""
    
    print("üöÄ Tests de la page de d√©tail projet avec CKEditor5 et Carousel Bootstrap")
    print("=" * 80)
    
    tests = [
        test_ckeditor5_configuration,
        test_project_models,
        test_project_detail_page,
    ]
    
    results = []
    for test_func in tests:
        result = test_func()
        results.append(result)
    
    print("\nüìä R√©sultats des tests :")
    print("=" * 40)
    
    if all(results):
        print("üéâ Tous les tests sont pass√©s avec succ√®s !")
        print("\n‚ú® Fonctionnalit√©s valid√©es :")
        print("  - CKEditor5 configur√© avec Cloudinary")
        print("  - Mod√®les utilisant CKEditor5Field")
        print("  - Page de d√©tail avec hero ajust√©")
        print("  - Carousel Bootstrap natif pour la galerie")
        print("  - CSS optimis√© sans code slider custom")
        print("  - Section t√©moignage visible")
        return True
    else:
        print("‚ùå Certains tests ont √©chou√©.")
        failed_tests = [i for i, result in enumerate(results) if not result]
        print(f"   Tests √©chou√©s : {failed_tests}")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
